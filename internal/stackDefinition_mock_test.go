// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/gocomms/internal (interfaces: IStackDefinition,IBoundResult)

// Package internal_test is a generated GoMock package.
package internal_test

import (
	reflect "reflect"

	internal "github.com/bhbosman/gocomms/internal"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockIStackDefinition is a mock of IStackDefinition interface.
type MockIStackDefinition struct {
	ctrl     *gomock.Controller
	recorder *MockIStackDefinitionMockRecorder
}

// MockIStackDefinitionMockRecorder is the mock recorder for MockIStackDefinition.
type MockIStackDefinitionMockRecorder struct {
	mock *MockIStackDefinition
}

// NewMockIStackDefinition creates a new mock instance.
func NewMockIStackDefinition(ctrl *gomock.Controller) *MockIStackDefinition {
	mock := &MockIStackDefinition{ctrl: ctrl}
	mock.recorder = &MockIStackDefinitionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStackDefinition) EXPECT() *MockIStackDefinitionMockRecorder {
	return m.recorder
}

// GetId mocks base method.
func (m *MockIStackDefinition) GetId() uuid.UUID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(uuid.UUID)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockIStackDefinitionMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockIStackDefinition)(nil).GetId))
}

// GetInbound mocks base method.
func (m *MockIStackDefinition) GetInbound() internal.IBoundResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInbound")
	ret0, _ := ret[0].(internal.IBoundResult)
	return ret0
}

// GetInbound indicates an expected call of GetInbound.
func (mr *MockIStackDefinitionMockRecorder) GetInbound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInbound", reflect.TypeOf((*MockIStackDefinition)(nil).GetInbound))
}

// GetName mocks base method.
func (m *MockIStackDefinition) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockIStackDefinitionMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockIStackDefinition)(nil).GetName))
}

// GetOutbound mocks base method.
func (m *MockIStackDefinition) GetOutbound() internal.IBoundResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOutbound")
	ret0, _ := ret[0].(internal.IBoundResult)
	return ret0
}

// GetOutbound indicates an expected call of GetOutbound.
func (mr *MockIStackDefinitionMockRecorder) GetOutbound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOutbound", reflect.TypeOf((*MockIStackDefinition)(nil).GetOutbound))
}

// GetStackState mocks base method.
func (m *MockIStackDefinition) GetStackState() internal.StackState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStackState")
	ret0, _ := ret[0].(internal.StackState)
	return ret0
}

// GetStackState indicates an expected call of GetStackState.
func (mr *MockIStackDefinitionMockRecorder) GetStackState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStackState", reflect.TypeOf((*MockIStackDefinition)(nil).GetStackState))
}

// MockIBoundResult is a mock of IBoundResult interface.
type MockIBoundResult struct {
	ctrl     *gomock.Controller
	recorder *MockIBoundResultMockRecorder
}

// MockIBoundResultMockRecorder is the mock recorder for MockIBoundResult.
type MockIBoundResultMockRecorder struct {
	mock *MockIBoundResult
}

// NewMockIBoundResult creates a new mock instance.
func NewMockIBoundResult(ctrl *gomock.Controller) *MockIBoundResult {
	mock := &MockIBoundResult{ctrl: ctrl}
	mock.recorder = &MockIBoundResultMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBoundResult) EXPECT() *MockIBoundResultMockRecorder {
	return m.recorder
}

// GetBoundResult mocks base method.
func (m *MockIBoundResult) GetBoundResult() internal.BoundResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBoundResult")
	ret0, _ := ret[0].(internal.BoundResult)
	return ret0
}

// GetBoundResult indicates an expected call of GetBoundResult.
func (mr *MockIBoundResultMockRecorder) GetBoundResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBoundResult", reflect.TypeOf((*MockIBoundResult)(nil).GetBoundResult))
}
