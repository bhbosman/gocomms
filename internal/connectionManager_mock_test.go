// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/gocomms/connectionManager (interfaces: IConnectionManager)

// Package internal_test is a generated GoMock package.
package internal_test

import (
	context "context"
	reflect "reflect"

	connectionManager "github.com/bhbosman/gocomms/connectionManager"
	gomock "github.com/golang/mock/gomock"
	rxgo "github.com/reactivex/rxgo/v2"
)

// MockIConnectionManager is a mock of IConnectionManager interface.
type MockIConnectionManager struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectionManagerMockRecorder
}

// MockIConnectionManagerMockRecorder is the mock recorder for MockIConnectionManager.
type MockIConnectionManagerMockRecorder struct {
	mock *MockIConnectionManager
}

// NewMockIConnectionManager creates a new mock instance.
func NewMockIConnectionManager(ctrl *gomock.Controller) *MockIConnectionManager {
	mock := &MockIConnectionManager{ctrl: ctrl}
	mock.recorder = &MockIConnectionManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectionManager) EXPECT() *MockIConnectionManagerMockRecorder {
	return m.recorder
}

// CloseAllConnections mocks base method.
func (m *MockIConnectionManager) CloseAllConnections(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAllConnections", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseAllConnections indicates an expected call of CloseAllConnections.
func (mr *MockIConnectionManagerMockRecorder) CloseAllConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAllConnections", reflect.TypeOf((*MockIConnectionManager)(nil).CloseAllConnections), arg0)
}

// CloseConnection mocks base method.
func (m *MockIConnectionManager) CloseConnection(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseConnection", arg0)
}

// CloseConnection indicates an expected call of CloseConnection.
func (mr *MockIConnectionManagerMockRecorder) CloseConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseConnection", reflect.TypeOf((*MockIConnectionManager)(nil).CloseConnection), arg0)
}

// DeregisterConnection mocks base method.
func (m *MockIConnectionManager) DeregisterConnection(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeregisterConnection", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeregisterConnection indicates an expected call of DeregisterConnection.
func (mr *MockIConnectionManagerMockRecorder) DeregisterConnection(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeregisterConnection", reflect.TypeOf((*MockIConnectionManager)(nil).DeregisterConnection), arg0)
}

// GetConnections mocks base method.
func (m *MockIConnectionManager) GetConnections(arg0 context.Context) ([]*connectionManager.ConnectionInformation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnections", arg0)
	ret0, _ := ret[0].([]*connectionManager.ConnectionInformation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnections indicates an expected call of GetConnections.
func (mr *MockIConnectionManagerMockRecorder) GetConnections(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnections", reflect.TypeOf((*MockIConnectionManager)(nil).GetConnections), arg0)
}

// NameConnection mocks base method.
func (m *MockIConnectionManager) NameConnection(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NameConnection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// NameConnection indicates an expected call of NameConnection.
func (mr *MockIConnectionManagerMockRecorder) NameConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NameConnection", reflect.TypeOf((*MockIConnectionManager)(nil).NameConnection), arg0, arg1)
}

// PublishStackData mocks base method.
func (m *MockIConnectionManager) PublishStackData(arg0 int, arg1, arg2 string, arg3 rxgo.StreamDirection, arg4, arg5 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PublishStackData", arg0, arg1, arg2, arg3, arg4, arg5)
}

// PublishStackData indicates an expected call of PublishStackData.
func (mr *MockIConnectionManagerMockRecorder) PublishStackData(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublishStackData", reflect.TypeOf((*MockIConnectionManager)(nil).PublishStackData), arg0, arg1, arg2, arg3, arg4, arg5)
}

// RegisterConnection mocks base method.
func (m *MockIConnectionManager) RegisterConnection(arg0 string, arg1 context.CancelFunc, arg2 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterConnection", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterConnection indicates an expected call of RegisterConnection.
func (mr *MockIConnectionManagerMockRecorder) RegisterConnection(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterConnection", reflect.TypeOf((*MockIConnectionManager)(nil).RegisterConnection), arg0, arg1, arg2)
}

// Start mocks base method.
func (m *MockIConnectionManager) Start(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockIConnectionManagerMockRecorder) Start(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockIConnectionManager)(nil).Start), arg0)
}

// StatusConnection mocks base method.
func (m *MockIConnectionManager) StatusConnection(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusConnection", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StatusConnection indicates an expected call of StatusConnection.
func (mr *MockIConnectionManagerMockRecorder) StatusConnection(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusConnection", reflect.TypeOf((*MockIConnectionManager)(nil).StatusConnection), arg0, arg1)
}

// Stop mocks base method.
func (m *MockIConnectionManager) Stop(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockIConnectionManagerMockRecorder) Stop(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockIConnectionManager)(nil).Stop), arg0)
}
