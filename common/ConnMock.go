// Code generated by MockGen. DO NOT EDIT.
// Source: net (interfaces: Conn,Addr)

// Package common is a generated GoMock package.
package common

import (
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockConn is a mock of Conn interface.
type MockConn struct {
	ctrl     *gomock.Controller
	recorder *MockConnMockRecorder
}

// MockConnMockRecorder is the mock recorder for MockConn.
type MockConnMockRecorder struct {
	mock *MockConn
}

// NewMockConn creates a new mock instance.
func NewMockConn(ctrl *gomock.Controller) *MockConn {
	mock := &MockConn{ctrl: ctrl}
	mock.recorder = &MockConnMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConn) EXPECT() *MockConnMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConn) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConn)(nil).Close))
}

// LocalAddr mocks base method.
func (m *MockConn) LocalAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LocalAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// LocalAddr indicates an expected call of LocalAddr.
func (mr *MockConnMockRecorder) LocalAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LocalAddr", reflect.TypeOf((*MockConn)(nil).LocalAddr))
}

// Read mocks base method.
func (m *MockConn) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConnMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConn)(nil).Read), arg0)
}

// RemoteAddr mocks base method.
func (m *MockConn) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockConnMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConn)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockConn) SetDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockConnMockRecorder) SetDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockConn)(nil).SetDeadline), arg0)
}

// SetReadDeadline mocks base method.
func (m *MockConn) SetReadDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetReadDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetReadDeadline indicates an expected call of SetReadDeadline.
func (mr *MockConnMockRecorder) SetReadDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetReadDeadline", reflect.TypeOf((*MockConn)(nil).SetReadDeadline), arg0)
}

// SetWriteDeadline mocks base method.
func (m *MockConn) SetWriteDeadline(arg0 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWriteDeadline", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWriteDeadline indicates an expected call of SetWriteDeadline.
func (mr *MockConnMockRecorder) SetWriteDeadline(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWriteDeadline", reflect.TypeOf((*MockConn)(nil).SetWriteDeadline), arg0)
}

// Write mocks base method.
func (m *MockConn) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockConnMockRecorder) Write(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConn)(nil).Write), arg0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [error]
// retString: error
// retString:  error
// ia: map[]
// idRecv: mr
// 0
func (mr *MockConnMockRecorder) OnCloseDoAndReturn(
	f func() error) *gomock.Call {
	return mr.
		Close().
		DoAndReturn(f)
}

// 0
func (mr *MockConnMockRecorder) OnCloseDo(
	f func()) *gomock.Call {
	return mr.
		Close().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockConnMockRecorder) OnCloseReturn(ret0 error) *gomock.Call {
	return mr.
		Close().
		Return(ret0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [net.Addr]
// retString: net.Addr
// retString:  net.Addr
// ia: map[]
// idRecv: mr
// 0
func (mr *MockConnMockRecorder) OnLocalAddrDoAndReturn(
	f func() net.Addr) *gomock.Call {
	return mr.
		LocalAddr().
		DoAndReturn(f)
}

// 0
func (mr *MockConnMockRecorder) OnLocalAddrDo(
	f func()) *gomock.Call {
	return mr.
		LocalAddr().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 net.Addr]
// retArgs22: ret0 net.Addr
// 1
func (mr *MockConnMockRecorder) OnLocalAddrReturn(ret0 net.Addr) *gomock.Call {
	return mr.
		LocalAddr().
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [[]byte]
// argString: arg0 []byte
// rets: [int error]
// retString: int, error
// retString:  (int, error)
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockConnMockRecorder) OnReadDoAndReturn(
	arg0 interface{},
	f func(arg0 []byte) (int, error)) *gomock.Call {
	return mr.
		Read(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockConnMockRecorder) OnReadDo(
	arg0 interface{},
	f func(arg0 []byte)) *gomock.Call {
	return mr.
		Read(arg0).
		Do(f)
}

// 1
func (mr *MockConnMockRecorder) OnReadDoAndReturnDefault(
	f func(arg0 []byte) (int, error)) *gomock.Call {
	return mr.
		Read(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockConnMockRecorder) OnReadDoDefault(
	f func(arg0 []byte)) *gomock.Call {
	return mr.
		Read(gomock.Any()).
		Do(f)
}

// retNames: [ret0 ret1]
// retArgs: [ret0 int ret1 error]
// retArgs22: ret0 int,ret1 error
// 1
func (mr *MockConnMockRecorder) OnReadReturn(
	arg0 interface{},
	ret0 int, ret1 error) *gomock.Call {
	return mr.
		Read(arg0).
		Return(ret0, ret1)
}

// 1
func (mr *MockConnMockRecorder) OnReadReturnDefault(
	ret0 int, ret1 error) *gomock.Call {
	return mr.
		Read(gomock.Any()).
		Return(ret0, ret1)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [net.Addr]
// retString: net.Addr
// retString:  net.Addr
// ia: map[]
// idRecv: mr
// 0
func (mr *MockConnMockRecorder) OnRemoteAddrDoAndReturn(
	f func() net.Addr) *gomock.Call {
	return mr.
		RemoteAddr().
		DoAndReturn(f)
}

// 0
func (mr *MockConnMockRecorder) OnRemoteAddrDo(
	f func()) *gomock.Call {
	return mr.
		RemoteAddr().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 net.Addr]
// retArgs22: ret0 net.Addr
// 1
func (mr *MockConnMockRecorder) OnRemoteAddrReturn(ret0 net.Addr) *gomock.Call {
	return mr.
		RemoteAddr().
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [time.Time]
// argString: arg0 time.Time
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockConnMockRecorder) OnSetDeadlineDoAndReturn(
	arg0 interface{},
	f func(arg0 time.Time) error) *gomock.Call {
	return mr.
		SetDeadline(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockConnMockRecorder) OnSetDeadlineDo(
	arg0 interface{},
	f func(arg0 time.Time)) *gomock.Call {
	return mr.
		SetDeadline(arg0).
		Do(f)
}

// 1
func (mr *MockConnMockRecorder) OnSetDeadlineDoAndReturnDefault(
	f func(arg0 time.Time) error) *gomock.Call {
	return mr.
		SetDeadline(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockConnMockRecorder) OnSetDeadlineDoDefault(
	f func(arg0 time.Time)) *gomock.Call {
	return mr.
		SetDeadline(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockConnMockRecorder) OnSetDeadlineReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		SetDeadline(arg0).
		Return(ret0)
}

// 1
func (mr *MockConnMockRecorder) OnSetDeadlineReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		SetDeadline(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [time.Time]
// argString: arg0 time.Time
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockConnMockRecorder) OnSetReadDeadlineDoAndReturn(
	arg0 interface{},
	f func(arg0 time.Time) error) *gomock.Call {
	return mr.
		SetReadDeadline(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockConnMockRecorder) OnSetReadDeadlineDo(
	arg0 interface{},
	f func(arg0 time.Time)) *gomock.Call {
	return mr.
		SetReadDeadline(arg0).
		Do(f)
}

// 1
func (mr *MockConnMockRecorder) OnSetReadDeadlineDoAndReturnDefault(
	f func(arg0 time.Time) error) *gomock.Call {
	return mr.
		SetReadDeadline(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockConnMockRecorder) OnSetReadDeadlineDoDefault(
	f func(arg0 time.Time)) *gomock.Call {
	return mr.
		SetReadDeadline(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockConnMockRecorder) OnSetReadDeadlineReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		SetReadDeadline(arg0).
		Return(ret0)
}

// 1
func (mr *MockConnMockRecorder) OnSetReadDeadlineReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		SetReadDeadline(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [time.Time]
// argString: arg0 time.Time
// rets: [error]
// retString: error
// retString:  error
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockConnMockRecorder) OnSetWriteDeadlineDoAndReturn(
	arg0 interface{},
	f func(arg0 time.Time) error) *gomock.Call {
	return mr.
		SetWriteDeadline(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockConnMockRecorder) OnSetWriteDeadlineDo(
	arg0 interface{},
	f func(arg0 time.Time)) *gomock.Call {
	return mr.
		SetWriteDeadline(arg0).
		Do(f)
}

// 1
func (mr *MockConnMockRecorder) OnSetWriteDeadlineDoAndReturnDefault(
	f func(arg0 time.Time) error) *gomock.Call {
	return mr.
		SetWriteDeadline(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockConnMockRecorder) OnSetWriteDeadlineDoDefault(
	f func(arg0 time.Time)) *gomock.Call {
	return mr.
		SetWriteDeadline(gomock.Any()).
		Do(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockConnMockRecorder) OnSetWriteDeadlineReturn(
	arg0 interface{},
	ret0 error) *gomock.Call {
	return mr.
		SetWriteDeadline(arg0).
		Return(ret0)
}

// 1
func (mr *MockConnMockRecorder) OnSetWriteDeadlineReturnDefault(
	ret0 error) *gomock.Call {
	return mr.
		SetWriteDeadline(gomock.Any()).
		Return(ret0)
}

// argNames: [arg0]
// defaultArgs: [gomock.Any()]
// defaultArgsAsString: gomock.Any()
// argTypes: [[]byte]
// argString: arg0 []byte
// rets: [int error]
// retString: int, error
// retString:  (int, error)
// ia: map[arg0:{}]
// idRecv: mr
// 1
func (mr *MockConnMockRecorder) OnWriteDoAndReturn(
	arg0 interface{},
	f func(arg0 []byte) (int, error)) *gomock.Call {
	return mr.
		Write(arg0).
		DoAndReturn(f)
}

// 1
func (mr *MockConnMockRecorder) OnWriteDo(
	arg0 interface{},
	f func(arg0 []byte)) *gomock.Call {
	return mr.
		Write(arg0).
		Do(f)
}

// 1
func (mr *MockConnMockRecorder) OnWriteDoAndReturnDefault(
	f func(arg0 []byte) (int, error)) *gomock.Call {
	return mr.
		Write(gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockConnMockRecorder) OnWriteDoDefault(
	f func(arg0 []byte)) *gomock.Call {
	return mr.
		Write(gomock.Any()).
		Do(f)
}

// retNames: [ret0 ret1]
// retArgs: [ret0 int ret1 error]
// retArgs22: ret0 int,ret1 error
// 1
func (mr *MockConnMockRecorder) OnWriteReturn(
	arg0 interface{},
	ret0 int, ret1 error) *gomock.Call {
	return mr.
		Write(arg0).
		Return(ret0, ret1)
}

// 1
func (mr *MockConnMockRecorder) OnWriteReturnDefault(
	ret0 int, ret1 error) *gomock.Call {
	return mr.
		Write(gomock.Any()).
		Return(ret0, ret1)
}

// MockAddr is a mock of Addr interface.
type MockAddr struct {
	ctrl     *gomock.Controller
	recorder *MockAddrMockRecorder
}

// MockAddrMockRecorder is the mock recorder for MockAddr.
type MockAddrMockRecorder struct {
	mock *MockAddr
}

// NewMockAddr creates a new mock instance.
func NewMockAddr(ctrl *gomock.Controller) *MockAddr {
	mock := &MockAddr{ctrl: ctrl}
	mock.recorder = &MockAddrMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAddr) EXPECT() *MockAddrMockRecorder {
	return m.recorder
}

// Network mocks base method.
func (m *MockAddr) Network() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Network")
	ret0, _ := ret[0].(string)
	return ret0
}

// Network indicates an expected call of Network.
func (mr *MockAddrMockRecorder) Network() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Network", reflect.TypeOf((*MockAddr)(nil).Network))
}

// String mocks base method.
func (m *MockAddr) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockAddrMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockAddr)(nil).String))
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [string]
// retString: string
// retString:  string
// ia: map[]
// idRecv: mr
// 0
func (mr *MockAddrMockRecorder) OnNetworkDoAndReturn(
	f func() string) *gomock.Call {
	return mr.
		Network().
		DoAndReturn(f)
}

// 0
func (mr *MockAddrMockRecorder) OnNetworkDo(
	f func()) *gomock.Call {
	return mr.
		Network().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 string]
// retArgs22: ret0 string
// 1
func (mr *MockAddrMockRecorder) OnNetworkReturn(ret0 string) *gomock.Call {
	return mr.
		Network().
		Return(ret0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [string]
// retString: string
// retString:  string
// ia: map[]
// idRecv: mr
// 0
func (mr *MockAddrMockRecorder) OnStringDoAndReturn(
	f func() string) *gomock.Call {
	return mr.
		String().
		DoAndReturn(f)
}

// 0
func (mr *MockAddrMockRecorder) OnStringDo(
	f func()) *gomock.Call {
	return mr.
		String().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 string]
// retArgs22: ret0 string
// 1
func (mr *MockAddrMockRecorder) OnStringReturn(ret0 string) *gomock.Call {
	return mr.
		String().
		Return(ret0)
}
