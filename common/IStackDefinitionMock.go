// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/gocomms/common (interfaces: IStackDefinition)

// Package common is a generated GoMock package.
package common

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIStackDefinition is a mock of IStackDefinition interface.
type MockIStackDefinition struct {
	ctrl     *gomock.Controller
	recorder *MockIStackDefinitionMockRecorder
}

// MockIStackDefinitionMockRecorder is the mock recorder for MockIStackDefinition.
type MockIStackDefinitionMockRecorder struct {
	mock *MockIStackDefinition
}

// NewMockIStackDefinition creates a new mock instance.
func NewMockIStackDefinition(ctrl *gomock.Controller) *MockIStackDefinition {
	mock := &MockIStackDefinition{ctrl: ctrl}
	mock.recorder = &MockIStackDefinitionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIStackDefinition) EXPECT() *MockIStackDefinitionMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockIStackDefinition) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockIStackDefinitionMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockIStackDefinition)(nil).Name))
}

// OnInbound mocks base method.
func (m *MockIStackDefinition) OnInbound() BoundResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnInbound")
	ret0, _ := ret[0].(BoundResult)
	return ret0
}

// OnInbound indicates an expected call of OnInbound.
func (mr *MockIStackDefinitionMockRecorder) OnInbound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnInbound", reflect.TypeOf((*MockIStackDefinition)(nil).OnInbound))
}

// OnOutbound mocks base method.
func (m *MockIStackDefinition) OnOutbound() BoundResult {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnOutbound")
	ret0, _ := ret[0].(BoundResult)
	return ret0
}

// OnOutbound indicates an expected call of OnOutbound.
func (mr *MockIStackDefinitionMockRecorder) OnOutbound() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnOutbound", reflect.TypeOf((*MockIStackDefinition)(nil).OnOutbound))
}

// StackState mocks base method.
func (m *MockIStackDefinition) StackState() IStackState {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StackState")
	ret0, _ := ret[0].(IStackState)
	return ret0
}

// StackState indicates an expected call of StackState.
func (mr *MockIStackDefinitionMockRecorder) StackState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StackState", reflect.TypeOf((*MockIStackDefinition)(nil).StackState))
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [string]
// retString: string
// retString:  string
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIStackDefinitionMockRecorder) OnNameDoAndReturn(
	f func() string) *gomock.Call {
	return mr.
		Name().
		DoAndReturn(f)
}

// 0
func (mr *MockIStackDefinitionMockRecorder) OnNameDo(
	f func()) *gomock.Call {
	return mr.
		Name().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 string]
// retArgs22: ret0 string
// 1
func (mr *MockIStackDefinitionMockRecorder) OnNameReturn(ret0 string) *gomock.Call {
	return mr.
		Name().
		Return(ret0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [BoundResult]
// retString: BoundResult
// retString:  BoundResult
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIStackDefinitionMockRecorder) OnOnInboundDoAndReturn(
	f func() BoundResult) *gomock.Call {
	return mr.
		OnInbound().
		DoAndReturn(f)
}

// 0
func (mr *MockIStackDefinitionMockRecorder) OnOnInboundDo(
	f func()) *gomock.Call {
	return mr.
		OnInbound().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 BoundResult]
// retArgs22: ret0 BoundResult
// 1
func (mr *MockIStackDefinitionMockRecorder) OnOnInboundReturn(ret0 BoundResult) *gomock.Call {
	return mr.
		OnInbound().
		Return(ret0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [BoundResult]
// retString: BoundResult
// retString:  BoundResult
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIStackDefinitionMockRecorder) OnOnOutboundDoAndReturn(
	f func() BoundResult) *gomock.Call {
	return mr.
		OnOutbound().
		DoAndReturn(f)
}

// 0
func (mr *MockIStackDefinitionMockRecorder) OnOnOutboundDo(
	f func()) *gomock.Call {
	return mr.
		OnOutbound().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 BoundResult]
// retArgs22: ret0 BoundResult
// 1
func (mr *MockIStackDefinitionMockRecorder) OnOnOutboundReturn(ret0 BoundResult) *gomock.Call {
	return mr.
		OnOutbound().
		Return(ret0)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [IStackState]
// retString: IStackState
// retString:  IStackState
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIStackDefinitionMockRecorder) OnStackStateDoAndReturn(
	f func() IStackState) *gomock.Call {
	return mr.
		StackState().
		DoAndReturn(f)
}

// 0
func (mr *MockIStackDefinitionMockRecorder) OnStackStateDo(
	f func()) *gomock.Call {
	return mr.
		StackState().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 IStackState]
// retArgs22: ret0 IStackState
// 1
func (mr *MockIStackDefinitionMockRecorder) OnStackStateReturn(ret0 IStackState) *gomock.Call {
	return mr.
		StackState().
		Return(ret0)
}
