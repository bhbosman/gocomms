// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/bhbosman/gocomms/intf (interfaces: IConnectionReactorFactory,IConnectionReactor)

// Package intf is a generated GoMock package.
package intf

import (
	context "context"
	reflect "reflect"

	model "github.com/bhbosman/gocommon/model"
	goprotoextra "github.com/bhbosman/goprotoextra"
	gomock "github.com/golang/mock/gomock"
	v2 "github.com/reactivex/rxgo/v2"
	zap "go.uber.org/zap"
)

// MockIConnectionReactorFactory is a mock of IConnectionReactorFactory interface.
type MockIConnectionReactorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectionReactorFactoryMockRecorder
}

// MockIConnectionReactorFactoryMockRecorder is the mock recorder for MockIConnectionReactorFactory.
type MockIConnectionReactorFactoryMockRecorder struct {
	mock *MockIConnectionReactorFactory
}

// NewMockIConnectionReactorFactory creates a new mock instance.
func NewMockIConnectionReactorFactory(ctrl *gomock.Controller) *MockIConnectionReactorFactory {
	mock := &MockIConnectionReactorFactory{ctrl: ctrl}
	mock.recorder = &MockIConnectionReactorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectionReactorFactory) EXPECT() *MockIConnectionReactorFactoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIConnectionReactorFactory) Create(arg0 context.Context, arg1 context.CancelFunc, arg2 model.ConnectionCancelFunc, arg3 *zap.Logger, arg4 interface{}) (IConnectionReactor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(IConnectionReactor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIConnectionReactorFactoryMockRecorder) Create(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIConnectionReactorFactory)(nil).Create), arg0, arg1, arg2, arg3, arg4)
}

// argNames: [arg0 arg1 arg2 arg3 arg4]
// defaultArgs: [gomock.Any() gomock.Any() gomock.Any() gomock.Any() gomock.Any()]
// defaultArgsAsString: gomock.Any(),gomock.Any(),gomock.Any(),gomock.Any(),gomock.Any()
// argTypes: [context.Context context.CancelFunc model.ConnectionCancelFunc *zap.Logger interface{}]
// argString: arg0 context.Context, arg1 context.CancelFunc, arg2 model.ConnectionCancelFunc, arg3 *zap.Logger, arg4 interface{}
// rets: [IConnectionReactor error]
// retString: IConnectionReactor, error
// retString:  (IConnectionReactor, error)
// ia: map[arg0:{} arg1:{} arg2:{} arg3:{} arg4:{}]
// idRecv: mr
// 1
func (mr *MockIConnectionReactorFactoryMockRecorder) OnCreateDoAndReturn(
	arg0, arg1, arg2, arg3, arg4 interface{},
	f func(arg0 context.Context, arg1 context.CancelFunc, arg2 model.ConnectionCancelFunc, arg3 *zap.Logger, arg4 interface{}) (IConnectionReactor, error)) *gomock.Call {
	return mr.
		Create(arg0, arg1, arg2, arg3, arg4).
		DoAndReturn(f)
}

// 1
func (mr *MockIConnectionReactorFactoryMockRecorder) OnCreateDo(
	arg0, arg1, arg2, arg3, arg4 interface{},
	f func(arg0 context.Context, arg1 context.CancelFunc, arg2 model.ConnectionCancelFunc, arg3 *zap.Logger, arg4 interface{})) *gomock.Call {
	return mr.
		Create(arg0, arg1, arg2, arg3, arg4).
		Do(f)
}

// 1
func (mr *MockIConnectionReactorFactoryMockRecorder) OnCreateDoAndReturnDefault(
	f func(arg0 context.Context, arg1 context.CancelFunc, arg2 model.ConnectionCancelFunc, arg3 *zap.Logger, arg4 interface{}) (IConnectionReactor, error)) *gomock.Call {
	return mr.
		Create(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIConnectionReactorFactoryMockRecorder) OnCreateDoDefault(
	f func(arg0 context.Context, arg1 context.CancelFunc, arg2 model.ConnectionCancelFunc, arg3 *zap.Logger, arg4 interface{})) *gomock.Call {
	return mr.
		Create(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).
		Do(f)
}

// retNames: [ret0 ret1]
// retArgs: [ret0 IConnectionReactor ret1 error]
// retArgs22: ret0 IConnectionReactor,ret1 error
// 1
func (mr *MockIConnectionReactorFactoryMockRecorder) OnCreateReturn(
	arg0, arg1, arg2, arg3, arg4 interface{},
	ret0 IConnectionReactor, ret1 error) *gomock.Call {
	return mr.
		Create(arg0, arg1, arg2, arg3, arg4).
		Return(ret0, ret1)
}

// 1
func (mr *MockIConnectionReactorFactoryMockRecorder) OnCreateReturnDefault(
	ret0 IConnectionReactor, ret1 error) *gomock.Call {
	return mr.
		Create(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).
		Return(ret0, ret1)
}

// MockIConnectionReactor is a mock of IConnectionReactor interface.
type MockIConnectionReactor struct {
	ctrl     *gomock.Controller
	recorder *MockIConnectionReactorMockRecorder
}

// MockIConnectionReactorMockRecorder is the mock recorder for MockIConnectionReactor.
type MockIConnectionReactorMockRecorder struct {
	mock *MockIConnectionReactor
}

// NewMockIConnectionReactor creates a new mock instance.
func NewMockIConnectionReactor(ctrl *gomock.Controller) *MockIConnectionReactor {
	mock := &MockIConnectionReactor{ctrl: ctrl}
	mock.recorder = &MockIConnectionReactorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIConnectionReactor) EXPECT() *MockIConnectionReactorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockIConnectionReactor) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockIConnectionReactorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockIConnectionReactor)(nil).Close))
}

// Init mocks base method.
func (m *MockIConnectionReactor) Init(arg0 goprotoextra.ToConnectionFunc, arg1 goprotoextra.ToReactorFunc, arg2, arg3 v2.NextFunc) (v2.NextFunc, v2.ErrFunc, v2.CompletedFunc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(v2.NextFunc)
	ret1, _ := ret[1].(v2.ErrFunc)
	ret2, _ := ret[2].(v2.CompletedFunc)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// Init indicates an expected call of Init.
func (mr *MockIConnectionReactorMockRecorder) Init(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockIConnectionReactor)(nil).Init), arg0, arg1, arg2, arg3)
}

// Open mocks base method.
func (m *MockIConnectionReactor) Open() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open")
	ret0, _ := ret[0].(error)
	return ret0
}

// Open indicates an expected call of Open.
func (mr *MockIConnectionReactorMockRecorder) Open() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockIConnectionReactor)(nil).Open))
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [error]
// retString: error
// retString:  error
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIConnectionReactorMockRecorder) OnCloseDoAndReturn(
	f func() error) *gomock.Call {
	return mr.
		Close().
		DoAndReturn(f)
}

// 0
func (mr *MockIConnectionReactorMockRecorder) OnCloseDo(
	f func()) *gomock.Call {
	return mr.
		Close().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIConnectionReactorMockRecorder) OnCloseReturn(ret0 error) *gomock.Call {
	return mr.
		Close().
		Return(ret0)
}

// argNames: [arg0 arg1 arg2 arg3]
// defaultArgs: [gomock.Any() gomock.Any() gomock.Any() gomock.Any()]
// defaultArgsAsString: gomock.Any(),gomock.Any(),gomock.Any(),gomock.Any()
// argTypes: [goprotoextra.ToConnectionFunc goprotoextra.ToReactorFunc v2.NextFunc v2.NextFunc]
// argString: arg0 goprotoextra.ToConnectionFunc, arg1 goprotoextra.ToReactorFunc, arg2, arg3 v2.NextFunc
// rets: [v2.NextFunc v2.ErrFunc v2.CompletedFunc error]
// retString: v2.NextFunc, v2.ErrFunc, v2.CompletedFunc, error
// retString:  (v2.NextFunc, v2.ErrFunc, v2.CompletedFunc, error)
// ia: map[arg0:{} arg1:{} arg2:{} arg3:{}]
// idRecv: mr
// 1
func (mr *MockIConnectionReactorMockRecorder) OnInitDoAndReturn(
	arg0, arg1, arg2, arg3 interface{},
	f func(arg0 goprotoextra.ToConnectionFunc, arg1 goprotoextra.ToReactorFunc, arg2, arg3 v2.NextFunc) (v2.NextFunc, v2.ErrFunc, v2.CompletedFunc, error)) *gomock.Call {
	return mr.
		Init(arg0, arg1, arg2, arg3).
		DoAndReturn(f)
}

// 1
func (mr *MockIConnectionReactorMockRecorder) OnInitDo(
	arg0, arg1, arg2, arg3 interface{},
	f func(arg0 goprotoextra.ToConnectionFunc, arg1 goprotoextra.ToReactorFunc, arg2, arg3 v2.NextFunc)) *gomock.Call {
	return mr.
		Init(arg0, arg1, arg2, arg3).
		Do(f)
}

// 1
func (mr *MockIConnectionReactorMockRecorder) OnInitDoAndReturnDefault(
	f func(arg0 goprotoextra.ToConnectionFunc, arg1 goprotoextra.ToReactorFunc, arg2, arg3 v2.NextFunc) (v2.NextFunc, v2.ErrFunc, v2.CompletedFunc, error)) *gomock.Call {
	return mr.
		Init(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).
		DoAndReturn(f)
}

// 1
func (mr *MockIConnectionReactorMockRecorder) OnInitDoDefault(
	f func(arg0 goprotoextra.ToConnectionFunc, arg1 goprotoextra.ToReactorFunc, arg2, arg3 v2.NextFunc)) *gomock.Call {
	return mr.
		Init(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).
		Do(f)
}

// retNames: [ret0 ret1 ret2 ret3]
// retArgs: [ret0 v2.NextFunc ret1 v2.ErrFunc ret2 v2.CompletedFunc ret3 error]
// retArgs22: ret0 v2.NextFunc,ret1 v2.ErrFunc,ret2 v2.CompletedFunc,ret3 error
// 1
func (mr *MockIConnectionReactorMockRecorder) OnInitReturn(
	arg0, arg1, arg2, arg3 interface{},
	ret0 v2.NextFunc, ret1 v2.ErrFunc, ret2 v2.CompletedFunc, ret3 error) *gomock.Call {
	return mr.
		Init(arg0, arg1, arg2, arg3).
		Return(ret0, ret1, ret2, ret3)
}

// 1
func (mr *MockIConnectionReactorMockRecorder) OnInitReturnDefault(
	ret0 v2.NextFunc, ret1 v2.ErrFunc, ret2 v2.CompletedFunc, ret3 error) *gomock.Call {
	return mr.
		Init(gomock.Any(), gomock.Any(), gomock.Any(), gomock.Any()).
		Return(ret0, ret1, ret2, ret3)
}

// argNames: []
// defaultArgs: []
// defaultArgsAsString:
// argTypes: []
// argString:
// rets: [error]
// retString: error
// retString:  error
// ia: map[]
// idRecv: mr
// 0
func (mr *MockIConnectionReactorMockRecorder) OnOpenDoAndReturn(
	f func() error) *gomock.Call {
	return mr.
		Open().
		DoAndReturn(f)
}

// 0
func (mr *MockIConnectionReactorMockRecorder) OnOpenDo(
	f func()) *gomock.Call {
	return mr.
		Open().
		DoAndReturn(f)
}

// retNames: [ret0]
// retArgs: [ret0 error]
// retArgs22: ret0 error
// 1
func (mr *MockIConnectionReactorMockRecorder) OnOpenReturn(ret0 error) *gomock.Call {
	return mr.
		Open().
		Return(ret0)
}
